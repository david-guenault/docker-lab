#===============================================================================
# ARBITER
#===============================================================================
# Description: The Arbiter is responsible for:
# - Loading, manipulating and dispatching the configuration
# - Validating the health of all other Shinken daemons
# - Issuing global directives to Shinken daemons (kill, activate-spare, etc.)
# https://shinken.readthedocs.org/en/latest/08_configobjects/arbiter.html
#===============================================================================
# IMPORTANT: If you use several arbiters you MUST set the host_name on each
# servers to its real DNS name ('hostname' command).
#===============================================================================
define arbiter {
    arbiter_name    arbiter-master
    #host_name       node1       ; CHANGE THIS if you have several Arbiters
    address         localhost   ; DNS name or IP
    port            7770
    spare           0           ; 1 = is a spare, 0 = is not a spare

    ## Interesting modules:
    # - named-pipe               = Open the named pipe nagios.cmd
    # - mongodb                  = Load hosts from a mongodb database
    # - pickle-retention-arbiter = Save data before exiting
    # - nsca                     = NSCA server
    # - vmware-auto-linking      = Lookup at Vphere server for dependencies
    # - import-glpi              = Import configuration from GLPI (need plugin monitoring for GLPI in server side)
    # - tsca                     = TSCA server
    # - mysql-mport              = Load configuration from a MySQL database
    # - ws-arbiter               = WebService for pushing results to the arbiter
    # - collectd                 = Receive collectd perfdata
    # - snmp-booster             = Snmp bulk polling module, configuration linker
    # - import-landscape    	 = Import hosts from Landscape (Ubuntu/Canonical management tool)
    # - aws			= Import hosts from Amazon AWS (here EC2)
    # - ip-tag			= Tag an host based on it's IP range
    # - file-tag			= Tag an host if it's on a flat file
    # - csv-tag			= Tag an host from the content of a CSV file

    modules    	 named-pipe
    #modules     named-pipe, mongodb, nsca, vmware-auto-linking, ws-arbiter, collectd, mport-landscape, snmp-booster, AWS

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check   0

    ## Uncomment these lines in a HA architecture so the master and slaves know
    ## how long they may wait for each other.
    #timeout              3   ; Ping timeout
    #data_timeout         120 ; Data send timeout
    #max_check_attempts   3   ; If ping fails N or more, then the node is dead
    #check_interval       60  ; Ping node every N seconds
}
#===============================================================================
# BROKER (S1_Broker)
#===============================================================================
# Description: The broker is responsible for:
# - Exporting centralized logs of all Shinken daemon processes
# - Exporting status data
# - Exporting performance data
# - Exposing Shinken APIs:
#   - Status data
#   - Performance data
#   - Configuration data
#   - Command interface
# https://shinken.readthedocs.org/en/latest/08_configobjects/broker.html
#===============================================================================
define broker {
    broker_name     broker-master
    address         localhost
    port            7772
    spare           0

    ## Optional
    manage_arbiters     1   ; Take data from Arbiter. There should be only one
                            ; broker for the arbiter.
    manage_sub_realms   1   ; Does it take jobs from schedulers of sub-Realms?
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every N seconds

    ## Modules
    # Default: None
    # Interesting modules that can be used:
    # - simple-log              = just all logs into one file
    # - livestatus              = livestatus listener
    # - tondodb-mysql           = NDO DB support
    # - npcdmod                 = Use the PNP addon
    # - graphite                = Use a Graphite time series DB for perfdata
    # - webui                   = Shinken Web interface
    # - glpidb                  = Save data in GLPI MySQL database
    modules     

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check   0
    
    ## Advanced
    realm   All
}
#===============================================================================
# POLLER (S1_Poller)
#===============================================================================
# Description: The poller is responsible for:
# - Active data acquisition
# - Local passive data acquisition
# https://shinken.readthedocs.org/en/latest/08_configobjects/poller.html
#===============================================================================
define poller {
    poller_name     poller-master
    address         localhost
    port            7771

    ## Optional
    spare               0   ; 1 = is a spare, 0 = is not a spare
    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
    min_workers         0   ; Starts with N processes (0 = 1 per CPU)
    max_workers         0   ; No more than N processes (0 = 1 per CPU)
    processes_by_worker 256 ; Each worker manages N checks
    polling_interval    1   ; Get jobs from schedulers each N seconds
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every N seconds

    ## Interesting modules that can be used:
    # - booster-nrpe     = Replaces the check_nrpe binary. Therefore it
    #                     enhances performances when there are lot of NRPE
    #                     calls.
    # - named-pipe     = Allow the poller to read a nagios.cmd named pipe.
    #                     This permits the use of distributed check_mk checks
    #                     should you desire it.
    # - snmp-booster     = Snmp bulk polling module
    modules     

    ## Advanced Features
    #passive         0       ; For DMZ monitoring, set to 1 so the connections
                             ; will be from scheduler -> poller.
    
    # Poller tags are the tag that the poller will manage. Use None as tag name to manage
    # untaggued checks
    #poller_tags     None

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check   0
    
 
    realm   All
}
#===============================================================================
# REACTIONNER
# Sample of an Android SMS reactionner
# Uncomment this reactionner to enable it
#===============================================================================
# 2 requirements:
# - "modules AndroidSMS" = in order to load SMS sending code
# - "reactionner_tags android_sms" = so ONLY commands with this tag will be
# sent to this reactionner, not mail things.
#===============================================================================
#define reactionner {
#    reactionner_name    reactionner-Android
#    address             WIFI-IP-OF-YOUR-ANDROID-PHONE
#    port                7769
#    spare               0
#    ## Optional
#    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
#    min_workers         1   ; Starts with N processes (0 = 1 per CPU)
#    max_workers         15  ; No more than N processes (0 = 1 per CPU)
#    polling_interval    1   ; Get jobs from schedulers each 1 second
#    timeout             3   ; Ping timeout
#    data_timeout        120 ; Data send timeout
#    max_check_attempts  3   ; If ping fails N or more, then the node is dead
#    check_interval      60  ; Ping node every N seconds
#    ## Modules
#    modules             android-sms
#    reactionner_tags    android_sms
#    ## Advanced Feature
#    realm   All
#}
#===============================================================================
# REACTIONNER (S1_Reactionner)
#===============================================================================
# Description: The reactionner is responsible for:
# - Executing notification actions
# - Executing event handler actions
# https://shinken.readthedocs.org/en/latest/08_configobjects/reactionner.html
#===============================================================================
define reactionner {
    reactionner_name    reactionner-master
    address             localhost
    port                7769
    spare               0

    ## Optionnal
    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
    min_workers         1   ; Starts with N processes (0 = 1 per CPU)
    max_workers         15  ; No more than N processes (0 = 1 per CPU)
    polling_interval    1   ; Get jobs from schedulers each 1 second
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every N seconds

    ## Modules
    modules     

    # Reactionner tags are the tag that the reactionner will manage. Use None as tag name to manage
    # untaggued notification/event handlers
    #reactionner_tags     None

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check   0

    ## Advanced
    realm   All
}
#===============================================================================
# RECEIVER
#===============================================================================
# The receiver manages passive information. It's just a "buffer" which will
# load passive modules (like NSCA) and be read by the arbiter to dispatch data.
#===============================================================================
define receiver {
    receiver_name   receiver-master
    address         localhost
    port            7773
    spare           0

    ## Optional parameters
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every N seconds

    ## Modules for Receiver
    # - named-pipe             = Open the named pipe nagios.cmd
    # - nsca                    = NSCA server
    # - tsca                    = TSCA server
    # - ws-arbiter              = WebService for pushing results to the arbiter
    # - collectd                = Receive collectd perfdata
    modules

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check  0
    
    ## Advanced Feature
    direct_routing      0   ; If enabled, it will directly send commands to the
                            ; schedulers if it knows about the hostname in the
                            ; command.
    realm   All
}
#===============================================================================
# SCHEDULER (S1_Scheduler)
#===============================================================================
# The scheduler is a "Host manager". It gets the hosts and their services,
# schedules the checks and transmit them to the pollers.
# Description: The scheduler is responsible for:
# - Creating the dependancy tree
# - Scheduling checks
# - Calculating states
# - Requesting actions from a reactionner
# - Buffering and forwarding results its associated broker
# https://shinken.readthedocs.org/en/latest/08_configobjects/scheduler.html
#===============================================================================
define scheduler {
    scheduler_name      scheduler-master ; Just the name
    address             localhost   ; IP or DNS address of the daemon
    port                7768        ; TCP port of the daemon
    ## Optional
    spare               0   ; 1 = is a spare, 0 = is not a spare
    weight              1   ; Some schedulers can manage more hosts than others
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every N seconds

    ## Interesting modules that can be used:
    # - pickle-retention-file     = Save data before exiting in flat-file
    # - mem-cache-retention   = Same, but in a MemCache server
    # - redis-retention      = Same, but in a Redis server
    # - retention-mongodb    = Same, but in a MongoDB server
    # - nagios-retention     = Read retention info from a Nagios retention file
    #                         (does not save, only read)
    # - snmp-booster             = Snmp bulk polling module
    #modules   pickle-retention-file
    modules

    ## Advanced Features
    # Realm is for multi-datacenters
    realm   All

    # Skip initial broks creation. Boot fast, but some broker modules won't
    # work with it!
    skip_initial_broks  0

    # In NATted environments, you declare each satellite ip[:port] as seen by
    # *this* scheduler (if port not set, the port declared by satellite itself
    # is used)
    #satellitemap    poller-1=1.2.3.4:7771, reactionner-1=1.2.3.5:7769, ...

    # Enable https or not
    use_ssl	          0
    # enable certificate/hostname check, will avoid man in the middle attacks
    hard_ssl_name_check   0
}
#===============================================================================
# MODULES 
#===============================================================================
## Module:      auth-cfg-password
## Loaded by:   WebUI
# Check authentification using password parameter in contact definition.
define module {
    module_name     auth-cfg-password
    module_type     cfg_password_webui
}
## Module:      CSVTag
## Loaded by:   Arbiter
# Will modify host definitions by looking at a csv file
# file put in "path" will be used to set 'use' and macros. The first line should describe the fields use as host_name (id_field)
# - use_properties : the fields taht will be put in the 'use'
# - macros_properties : the fields that will be just put as macros 
# Method : how to add in the 'use' property:
# - replace = put the value if not another one is in place
# - append  = add with a comma (,) if a value already exist, on the END
# - prepend = add with a comma (,) if a value already exist, on the BEGINING
# - set     = just the value, erase what was before.
define module{
    module_name		CSVTag
    module_type     	csv_tag
    path	    	/tmp/YOURFILE.csv
    id_field	    	Name                  ; Will look on the first line the index of this field
    id_strip_options	lower|nofqdn          ; Will clean the csv host name with lower() and remove fqdn
    method          	prepend               ; will just add BEFORE the current 'use' entry 
    
    use_properties	OS family,OS version  ; We will take theses fields and put them into the 'use'
    macros_properties   CPU,RAM               ; theses fields will be put as macros, like   _CPU   2
}
## Module:      FileTag
## Loaded by:   Arbiter
# Will modify host definitions by looking at hostname, if its list one the
# file put in "path"(list a list of host_name, \n separated), it will apply the "property value" just like if that line
# was set in the host definition. Like IPTag module
# Method : replace or append.
# - replace = put the value if not another one is in place
# - append  = add with a comma (,) if a value already exist, on the END
# - prepend = add with a comma (,) if a value already exist, on the BEGINING
# - set     = just the value, erase what was before.
define module{
    module_name     FileTag
    module_type     file_tag
    path	    /tmp/vmlist.txt
    method          prepend
    property        use
    value           VM
}
## Module:      graphite
## Loaded by:   Broker
# Export host and service performance data to Graphite carbon process.
# Graphite is a time series database with a rich web service interface, viewed
# as a modern alternative to RRDtool.  http://graphite.wikidot.com/start
define module {
    module_name     graphite
    module_type     graphite_perfdata
    host            localhost
    port            2003  ; Or 2004 if using use_pickle 1
    # Optionally specify a source identifier for the metric data sent to
    # Graphite. This can help differentiate data from multiple sources for the
    # same hosts. HostA.GRAPHITE_DATA_SOURCE.service
    # You MUST set the same value in the graphite_perfdata and GRAPHITE_UI module
    # configuration.
    #use_pickle 1 ; default value is 0, 1 for pickled data
    #tick_limit 300 ; Default value 300
    #graphite_data_source shinken ; default is that the variable is unset
    # If this parameter is enabled the metric time will be change to remove latency
    # For example if the check was scheduled at 0 but was done at 2,
    # the timestamp associated to the data will be 0
    # Basically this ignore small latency in order to have regular interval between data.
    # We skip an Graphite limitation that expect a specific timestamp range for data.
    #ignore_latency_limit 15 ; 
}
## Module:      HackCommandsPollerTag
## Loaded by:   Arbiter
# Replace on-the-fly a command's poller tag by another.
# Useful when you use a fixed configuration tool that doesn't allow you to
# configure poller_tag.
define module {
    module_name     HackCommandsPollerTag
    module_type     hack_commands_poller_tag
    cmd_line_match  (.*)check_esx3(.*)
    poller_tag      esx3
}
## Module:      HackPollerTagByMacros
## Loaded by:   Arbiter
# Replace on-the-fly hosts and services' poller tag by searching for a custom
# macro.
# Useful when you use a fixed configuration tool that doesn't allow you to
# configure poller_tag, like Centreon
define module {
    module_name         HackPollerTagByMacros
    module_type         hack_poller_tag_by_macros 
    host_macro_name     _poller_tag
    service_macro_name  _poller_tag
}
## Module:      ip-tag
## Loaded by:   Arbiter
# Will modify host definitions by looking at host address and, if its IP is in
# the range defined, it will apply the "property value" just like if that line
# was set in the host definition.
# Method : replace or append.
# - replace = put the value if not another one is in place
# - append  = add with a comma (,) if a value already exist, on the END
# - prepend = add with a comma (,) if a value already exist, on the BEGINING
# - set     = just the value, erase what was before.
define module{
    module_name     ip-tag
    module_type     ip_tag
    ip_range        127.0.0.0/30
    method          replace ; replace or append
    property        poller_tag
    value           LOCAL
}
## Module:      livestatus
## Loaded by:   Broker
# The LIVESTATUS API makes internal Shinken data available via the network
# using an SQL-like syntax. The API supports various access methods,
# authentication and sophisticated performance options. The premier interface
# to Shinken internal host and service states, historical data, performance
# data, configuration data, comments, maintenance periods, etc.
define module {
    module_name     livestatus
    module_type     livestatus
    host            *           ; * = listen on all configured IP addresses
    port            50000       ; port to listen
    #socket          /usr/local/shinken/var/rw/live  ; If a Unix socket is required
    ## Available modules:
    # - logstore-sqlite: send historical logs to a local sqlite database
    # - logstore-mongodb: send historical logs to a mongodb database
    # - logstore-null : send historical logs to a black hole
    modules         logstore-sqlite
    #debug           /tmp/ls.debug   ; Enable only for debugging this module
    #debug_queries   0   ; Set to 1 to dump queries/replies too (very verbose)
}
## Module:      logstore-mongodb
## Loaded by:   Livestatus
# Put the Livestatus logs in an mongodb database, so LS can query them.
define module {
    module_name     logstore-mongodb
    module_type     logstore_mongodb
    mongodb_uri     mongodb://localhost/?safe=false  ; Set to your value
    # If you are running a MongoDB cluster (called a “replica set” in MongoDB),
    # you need to specify it's name here. 
    # With this option set, you can also write the mongodb_uri as a comma-separated
    # list of host:port items. (But one is enough, it will be used as a “seed”)
    #replica_set
    #database
    #collection
    #max_logs_age
}
## Module:      logstore-sqlite
## Loaded by:   Livestatus
# Put the Livestatus logs in an sqlite database, and so LS can query them.
define module {
    module_name     logstore-sqlite
    module_type     logstore_sqlite
	# Shinken 1.4 configuration
    # database_file   /usr/local/shinken/var/livelogs.db
	# Shinken 2.0 configuration
    database_file   /var/log/shinken/livelogs.db
    # Prefer SQL queries if available instead of internal in-memory lookups
    # Some corner cases may return invalid or no data. Defaults to 0 if unset.
    #use_aggressive_sql      1   ; Set to 1 for large installations
    # Only use this module to read log. Useful if you load balance
    # your livestatus activity over severals livestatus broker module.
    # Defaults to 0 if unset
    #read_only       1 ; Read only logstore
    max_logs_age    3m  ; d = days, w = weeks, m = months, y = years
}
## Module:      Mongodb
## Loaded by:   Arbiter, WebUI
# In Arbiter: Read objects in a mongodb database (like hosts or services).
# In WebUI: Save/read user preferences.
define module {
    module_name     mongodb
    module_type     mongodb
    uri             mongodb://localhost/?safe=false
    database        shinken
    #username        username     ;optional
    #password        password     ;optional
	
    #replica_set                  ;Advanced option if you are running a cluster environnement
}
## Module:      named-pipe
## Loaded by:   Poller, Arbiter, Receiver
# Receive passive host and service results, typically from check_mk plugins.
# No other commands or inputs accepted (Restricted to host and service results)
define module {
    module_name     named-pipe
    module_type     named_pipe
    command_file    /var/lib/shinken/nagios.cmd
}
## Module:      retention-mongodb
## Loaded by:   Scheduler
# Retention file to keep state between process restarts.
define module {
    module_name     retention-mongodb
    module_type     mongodb_retention
    uri             mongodb://localhost/?safe=false
    database        shinken
    
    # Advanced option if you are running a cluster environnement
    #    replica_set
}
## Module:      PickleRetentionArbiter
## Loaded by:   Arbiter
# Retention file to keep state between process restarts.
define module {
    module_name     PickleRetentionArbiter
    module_type     pickle_retention_file_generic
    path            /tmp/retention_arbiter.dat
}
## Module:      PickleRetentionBroker
## Loaded by:   Broker
# Retention file to keep state between process restarts.
define module {
    module_name     PickleRetentionBroker
    module_type     pickle_retention_file_generic
    path            /tmp/retention_broker.dat
}
## Module:      snapshot-mongodb
## Loaded by:   broker,webui
# Save hosts/service snapshots into mongodb
define module {
    module_name     snapshot-mongodb
    module_type     snapshot_mongodb
    uri             mongodb://localhost/?safe=false
    database        shinken
    
    # Advanced option if you are running a cluster environnement
    #    replica_set
}
## Module:      SQLite
## Loaded by:   WebUI
# In WebUI: Save/read user preferences
define module {
    module_name     SQLitedb
    module_type     sqlitedb
    uri             /var/lib/shinken/webui.db
}
## Module:      ToSqlite
## Loaded by:   Broker
## Not Commonly Used! : DEPRECATED
# SQLite database export.
#define module {
#    module_name     ToSqlite
#    module_type     sqlitelog
# Shinken 1.4 configuration
# path /usr/local/shinken/var/livelogs.db
# Shinken 2.0 configuration
# path /var/log/shinken/sqlitelog.db
#}
## Module:      ui-graphite
## Loaded by:   WebUI
# Use Graphite graphs in the WebUI, based on default or graphite URL API
# templates.
# 
# IMPORTANT : Set the proper TIME_ZONE parameter in graphite : webapp/graphite/local_settings.py
# Set if to match the system setting.
# If not, 4h graphs will be broken.
define module {
    module_name     ui-graphite
    module_type     graphite-webui
    uri             http://YOURSERVERNAME/  ; Set your Graphite URI. Note : YOURSERVERNAME will be
                                            ; changed by your broker hostname
    templates_path  /var/lib/shinken/share/templates/graphite/
    # Optionally specify a source identifier for the metric data sent to
    # Graphite. This can help differentiate data from multiple sources for the
    # same hosts. HostA.GRAPHITE_DATA_SOURCE.service
    # You MUST set the same value in the graphite_perfdata and GRAPHITE_UI module
    # configuration.
    #graphite_data_source    shinken
}
## Module:      webui
## Loaded by:   Broker
# The Shinken web interface and integrated web server.
define module {
    module_name         webui
    module_type         webui
    host                0.0.0.0     ; All interfaces = 0.0.0.0
    port                7767
    auth_secret         CHANGE_ME   ; CHANGE THIS or someone could forge cookies
    allow_html_output   1       ; Allow or not HTML chars in plugins output.
                                ; WARNING: Allowing can be a security issue.
    max_output_length   1024     ; Maximum output length for plugin output in webui
    manage_acl          1       ; Use contacts ACL. 0 allow actions for all.
    play_sound          0       ; Play sound on new non-acknowledged problems.
    login_text          Welcome on Shinken WebUI    ; Text in the login form.

    ## Modules for WebUI
    # - auth-htpasswd         = Use an htpasswd file for auth backend.
    # - auth-active-directory = Use AD for auth backend (and retrieve photos).
    # - auth-cfg-password     = Use the password setted in Shinken contact for auth.
    # - ui-pnp                = Use PNP graphs in the UI.
    # - ui-graphite           = Use graphs from Graphite time series database.
    # - mongodb               = Save user preferences to a Mongodb database
    # - SQLitedb              = Save user preferences to a SQLite database
    modules		
    ## Advanced Options
    # Don't play with them on your production server ;)
    #http_backend            auto    ; Choice is: auto, wsgiref or cherrypy if available
    #remote_user_enable      1       ; If WebUI is behind a web server which
                                     ; has already authentified user, enable.
    #remote_user_enable      2       ; Look for remote user in the WSGI environment
                                     ; instead of the HTTP header. This allows
                                     ; for fastcgi (flup) and scgi (flupscgi)
                                     ; integration, eg. with the apache modules.
    #remote_user_variable    X_Remote_User  ; Set to the HTTP header containing
                                     ; the authentificated user s name, which
                                     ; must be a Shinken contact.
    # If you got external plugins (pages) to load on webui
    #additional_plugins_dir   

}
## Module:      ws-arbiter
## Loaded by:   Arbiter, Receiver
# WebService module for the Arbiter and Receiver so you can send (POST) passive
# checks to it :)
define module {
    module_name     ws-arbiter
    module_type     ws_arbiter
    host            0.0.0.0
    port            7760
    username        anonymous   ; If you want auth, set username and password.
    #password        secret
}
